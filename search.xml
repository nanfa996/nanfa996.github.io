<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctf杂项图片隐写总结</title>
      <link href="/2022/07/19/ctf-za-xiang-tu-pian-yin-xie-zong-jie/"/>
      <url>/2022/07/19/ctf-za-xiang-tu-pian-yin-xie-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ctf杂项图片隐写总结"><a href="#ctf杂项图片隐写总结" class="headerlink" title="ctf杂项图片隐写总结"></a>ctf杂项图片隐写总结</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>ctf杂项里面，有很大一部分都是关于图片隐写的，不是说整个题都是隐写，但会有这个题的关键步骤会涉及到图片隐写的情况，得到的信息可能就是flag或者是一些解题的关键信息，本文就对常见的隐写类型进行一个系统性的总结（后期遇到其他类型的隐写也会不定期更新）<br>后文的flag或者关键信息都会统一用flag来代替</p><h2 id="2-隐写类型总结"><a href="#2-隐写类型总结" class="headerlink" title="2.隐写类型总结"></a>2.隐写类型总结</h2><p>  常见的隐写类型主要包括：</p><p>   <strong>图片信息隐写</strong><br>   <strong>lsb隐写</strong><br>   <strong>outguess隐写</strong><br>   <strong>f5隐写</strong></p><h3 id="2-1-图片信息隐写"><a href="#2-1-图片信息隐写" class="headerlink" title="2.1 图片信息隐写"></a>2.1 图片信息隐写</h3><ul><li>flag直接放在二进制数据流里面（常常出现在文件二进制的末尾）<br>使用winhex或者010editor打开直接查看文件末尾</li><li>flag藏在属性里面（一般是jpg格式的图片）<br>右键详细属性查看</li><li>修改图片的宽高<br>使用winhex或者010editor直接修改即可</li></ul><h3 id="2-2-lsb隐写"><a href="#2-2-lsb隐写" class="headerlink" title="2.2 lsb隐写"></a>2.2 lsb隐写</h3><p>  LSB就是最低有效位，一般图片是由三种颜色组成，LSB隐写修改图片中的最低的1bit，可将信息隐藏在图片之中，通过人眼无法察觉该隐写方式一般只能用于<strong>PNG、BMP这类无损格式</strong>，像JPEG这种有损格式是不会有的。（注意：判断格式不能看文件扩展名，扩展名并不完全能代表一个图片的格式，需要看文件的二进制数据头）</p><p><font size="4"> 对于LSB隐写<br>   1)可使用Stegsolve工具辅助分析 </font></p><ol><li>打开加密图片后，选择Analyse-DataExtract</li><li>Bit Planes 选中Reg、Green、Blue的第0位</li><li>Bit Order选中LSBFirst</li><li>Bit Plane Order选中RGB GRB BGR等</li></ol><p>  <font size="4"> 2)也可以使用github上的小工具分析 </font><br>   工具的用法在github上写的都挺清楚的</p><blockquote><p><a href="https://github.com/RobinDavid/LSB-Steganography">lsb工具</a></p></blockquote><h3 id="2-3-outguess隐写"><a href="#2-3-outguess隐写" class="headerlink" title="2.3 outguess隐写"></a>2.3 outguess隐写</h3><p>   对于outguess隐写，直接使用outguess工具即可，后文会讲到</p><h3 id="2-4-f5隐写"><a href="#2-4-f5隐写" class="headerlink" title="2.4 f5隐写"></a>2.4 f5隐写</h3><p>   同样f5隐写，也可直接使用f5工具</p><h2 id="3-破解隐写的常用工具介绍"><a href="#3-破解隐写的常用工具介绍" class="headerlink" title="3.破解隐写的常用工具介绍"></a>3.破解隐写的常用工具介绍</h2><h3 id="3-1-stegsolve-jar"><a href="#3-1-stegsolve-jar" class="headerlink" title="3.1 stegsolve.jar"></a>3.1 stegsolve.jar</h3><p>本质上就是一个Java文件，要使用的前提是配置好Java的环境，然后就可以直接双击打开就好</p><blockquote><p>附上链接<a href="http://www.caesum.com/handbook/Stegsolve.jar">stegsolve</a></p></blockquote><p>用法我个人目前用的较多的就是</p><ul><li>动图的逐帧阅读</li><li>lsb隐写的初步检测(方法在上文lsb隐写中提到过)</li><li>图片的交互运算<br>更多功能可自行探究</li></ul><h3 id="3-2-outguess"><a href="#3-2-outguess" class="headerlink" title="3.2 outguess"></a>3.2 outguess</h3><p>outguess用于outguess隐写，安装方法可自行百度</p><p><font size="4">获取相应的指令用法</font></p><pre class=" language-bash"><code class="language-bash">outguess -help</code></pre><p><font size="4">加密</font></p><pre class=" language-bash"><code class="language-bash">outguess -k <span class="token punctuation">[</span>secretkey<span class="token punctuation">]</span> -d hidden demo.jpg out.jpg</code></pre><blockquote><p>secretkey为加密密码，不填则默认无密码，-k是密码选项<br>  -d表示加密，hidden是要加密的内容，demo.jpg会覆盖out.jpg</p></blockquote><p><font size="4">解密</font></p><pre class=" language-bash"><code class="language-bash">outguess -k <span class="token punctuation">[</span>secretkey<span class="token punctuation">]</span> -r out.jpg hidden.txt</code></pre><blockquote><p>同样，secretkey是密码，out.jpg是隐藏图片，hidden是隐写内容</p></blockquote><h3 id="3-3-zsteg"><a href="#3-3-zsteg" class="headerlink" title="3.3 zsteg"></a>3.3 zsteg</h3><p>zsteg可以检测PNG和BMP图片里的隐写数据，是一个比较强大的检测隐写的工具</p><blockquote><p>附上链接<a href="https://github.com/zed-0xff/zsteg">zsteg</a></p></blockquote><p>目前，zsteg支持检测</p><ul><li>LSB steganography in PNG &amp; BMP（<strong>一般这个用的多</strong>）</li><li>zlib-compressed data</li><li>OpenStego</li><li>Camouflage 1.2.1</li><li>LSB with The Eratosthenes set<br><font size="4">用法</font></li></ul><pre class=" language-bash"><code class="language-bash">zsteg -h <span class="token comment" spellcheck="true">#帮助</span>zsteg hidden.png <span class="token comment" spellcheck="true">#检测图片的lsb信息</span>zsteg -E <span class="token string">"b1,bgr,lsb,xy"</span> hidden.png <span class="token operator">></span> out.txt <span class="token comment" spellcheck="true">#导出内容</span></code></pre><blockquote><p>双引号中的内容得因具体而定</p></blockquote><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>隐写算是misc中算是较为常见的一种题型，很多时候，在没有思路的情况下，可以往这方面多考虑考虑，至于是哪种隐写，就得看自己自行判断了，本文就到这里了，感谢阅读。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用hexo写博客总结</title>
      <link href="/2022/07/08/yong-hexo-xie-bo-ke-zong-jie/"/>
      <url>/2022/07/08/yong-hexo-xie-bo-ke-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用hexo写博客总结"><a href="#用hexo写博客总结" class="headerlink" title="用hexo写博客总结"></a>用hexo写博客总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为是小白，还是第一次接触hexo，对如何写文章还不是特别了解，所以这篇文章是通过查阅后我自己的总结。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-创建自己的文章"><a href="#1-创建自己的文章" class="headerlink" title="1.创建自己的文章"></a>1.创建自己的文章</h3><h4 id="1-1文章（post"><a href="#1-1文章（post" class="headerlink" title="1.1文章（post)"></a>1.1文章（post)</h4><p>hexo的布局（layout）有三种，post（文章）、draft（草稿）、page（页面）不同的布局产生的md文件都会储存在不同的文件夹下面<br>我们可以利用下面命令模板创建一种md文件</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>例如创建文章时，使用如下命令</p><pre class=" language-bash"><code class="language-bash">hexo new post <span class="token string">"My New Post"</span></code></pre><p>这里的post可以省略，即是</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><blockquote><p>这里的”My New Post”是你要创建文章的标题，也即title,注意要打<strong>引号</strong><br>  post是指定创建的布局，因为hexo默认的创建是文章布局，所以psot可以省略，当然也可以更改设置(我感觉没啥必要我就不阐述了)</p></blockquote><h4 id="1-2草稿-draft"><a href="#1-2草稿-draft" class="headerlink" title="1.2草稿(draft)"></a>1.2草稿(draft)</h4><p>草稿（draft）布局不会显示在网站上，所以如果我们不想显示某篇文章时，可以将其移到source/-draft文件夹中<br>同理创建草稿时使用命令</p><pre class=" language-bash"><code class="language-bash">hexo new draft <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>可以使用命令来发布草稿，此时草稿将会变成文章或页面，放置到对应的文件夹</p><pre class=" language-bash"><code class="language-bash">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>查看草稿</p><pre class=" language-bash"><code class="language-bash">hexo server --draft</code></pre><h3 id="2-文章结构"><a href="#2-文章结构" class="headerlink" title="2.文章结构"></a>2.文章结构</h3><p>创建完成一个文章后，会在-post文件夹中生成一个md文件,内容如下</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: Hello Worlddate: 2022/6/8 20:46:25<span class="token hr punctuation">---</span></code></pre><p>此时你可以在两个—中间(文件头)添加tags属性，为文章加标签<br>格式为tags： [a,b…]<br>如上述文章添加a和b标签，则md文件为</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: Hello Worlddate: 2022/6/8 20:46:25tags: [a,b]<span class="token hr punctuation">---</span></code></pre><blockquote><p>注意tags引号后面有一个空格<br>然后在文件头的下面就可以开始愉快的写文章啦</p></blockquote><blockquote><p>文章采用的markdown来进行排版，具体的语法可以参考这个<a href="https://markdown.com.cn/basic-syntax/">markdown基本语法</a><br>  后续我应该也会对markdown进行一个简单的总结，到时候也可以看我的文章hhh</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo写博客的部分就到这啦<br>总结就是：</p><ul><li>在命令行创建文章</li><li>在md文件里面进行编辑</li><li>最后部署到服务端</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人ctf杂项经验(不定期更新)</title>
      <link href="/2022/07/07/ge-ren-ctf-za-xiang-jing-yan-bu-ding-qi-geng-xin/"/>
      <url>/2022/07/07/ge-ren-ctf-za-xiang-jing-yan-bu-ding-qi-geng-xin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="个人ctf杂项经验-不定期更新"><a href="#个人ctf杂项经验-不定期更新" class="headerlink" title="个人ctf杂项经验(不定期更新)"></a>个人ctf杂项经验(不定期更新)</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>  这是我个人在打ctf过程中总结的一些微不足道的经验，供我学习使用，当然也很乐意分享。<br>主要包括<br>    <strong>图片</strong><br>    <strong>视频（音频）</strong><br>    <strong>解密</strong><br>    <strong>其他</strong></p><span id="more"></span><h2 id="2-正片"><a href="#2-正片" class="headerlink" title="2.正片"></a>2.正片</h2><h3 id="2-1-图片"><a href="#2-1-图片" class="headerlink" title="2.1 图片"></a>2.1 图片</h3><ul><li>拿到图片，先用binwalk分析，有隐藏文件就用foremost分离</li><li>jpg图片先看属性，png图片用pngcheck看是否修改了宽，使用winhex或者010editor修改回来</li><li>分析是否有隐写，使用脚本或者stegslove来分析</li><li>两张一模一样的图，可能是盲水印，用mang.py脚本，也有可能是两张图的运算stegslove</li><li>如果有纯色图，颜色的十六进制编码可能和flag有关，使用ps查看十六进制</li></ul><h3 id="2-2-视频（音频）"><a href="#2-2-视频（音频）" class="headerlink" title="2.2 视频（音频）"></a>2.2 视频（音频）</h3><ul><li>音频文件可以试着看看频谱图(用audacity打开)</li><li>实在没啥思路可以使用deepsound看看是否有隐藏信息</li><li>wav文件有可能也有lsb隐写，用silenteye</li><li>出现明显的摩斯密码音用audacity</li><li>出现明显的拨号音，用拨号键工具</li><li>swf文件用flsh插件打开，用JPEXS Free Flash Decompiler反编译</li></ul><h3 id="2-3-解密"><a href="#2-3-解密" class="headerlink" title="2.3 解密"></a>2.3 解密</h3><ul><li>出现类似（♯♪♭♯♭♯¶♭♬♪♯‖§‖∮♪==）的音乐符号，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">音乐解码</a></li><li>出现类似（⡢⠡⡲⠁⡏⡐==）的符号，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">盲文解码</a></li><li>大量无规律的字符(字母加括号)，可能要用<a href="http://corpus.zhonghuayuwen.org/CpsTongji.aspx">字频统计</a></li><li>出现ook!，使用<a href="https://www.splitbrain.org/services/ook">ook!解码</a></li><li>给了key(密码)和iv(偏移量)，可能是<a href="http://tool.chacuo.net/cryptdes">AES加密或者DES加密</a></li><li>福尔摩斯小人密码<img src="/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF%E5%B0%8F%E4%BA%BA%E5%AF%86%E7%A0%81.png" alt="小人密码"></li><li>有明显的条形码痕迹（斑马图之类的），使用<a href="https://online-barcode-reader.inliteresearch.com/">条形码阅读器</a></li></ul><h2 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h2><p>现在我还是比较菜的，不过也正在努力变强中！！一起加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/14/hello-world/"/>
      <url>/2022/06/14/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
